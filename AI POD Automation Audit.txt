AI POD Automation Audit 

6. High-Impact Action Plan for Production Readiness
Below is a prioritized action plan addressing the findings, with an emphasis on enabling the SEO module to shine in production while mitigating risks from incomplete components. Each task is labeled with priority (üî• High, ‚ö° Medium, üîß Low), dependencies (if any), and an estimated effort.
üî• Secure Configuration & Secrets: (Effort: 0.5 day)
Remove hardcoded secrets from code. Update EtsyServiceAdapter to load Supabase URL and key from env (settings.SUPABASE_URL/KEY) instead of the literal string
github.com
. Immediately rotate the Supabase service role key and update the .env file with the new key (since the old one was exposed in version control).
Double-check that no other secret (API keys, etc.) is hardcoded. Ensure JWT_SECRET, ETSY_CLIENT_ID/SECRET, STRIPE_API_KEY are all coming from env.
Dependency: None (straightforward refactor).
Impact: Critical security fix to protect sensitive data.
üî• Enforce Authentication & Remove Unsafe Endpoints: (Effort: 0.5 day)
Disable or delete the /api/v1/etsy/test-listings and /test-listings/{id} endpoints
github.com
github.com
 for production builds. These were for dev convenience and should not be exposed. If needed for testing in non-prod, guard them behind an environment flag or a check that current_user is admin.
Audit all routes to ensure that any that return user-specific data require Depends(get_current_user). For example, confirm that /api/v1/seo/optimize-listing uses the current_user (it does, pulling user_id for data fetch
github.com
). Also ensure the /auth endpoints are secure (e.g., rate-limit login attempts, use proper password hashing).
Possibly adjust CORS in production to restrict origins. In settings, set BACKEND_CORS_ORIGINS to your frontend‚Äôs domain. This prevents unauthorized third-party sites from hitting your API with user tokens (small security improvement).
Dependency: Having user auth flow working (likely already implemented).
Impact: Prevents unauthorized data access and locks down API to intended clients.
üî• Fix Frontend Error Handling & State Management Bugs: (Effort: 1 day)
Refactor SEOOptimizerPage error handling. Introduce separate state for ‚ÄúlistingLoadError‚Äù and ‚ÄúoptimizeError, or include a context field in the error (e.g., an object {source: 'fetchListings'|'optimize', message: '...'}). Use these to render appropriate messages. For instance, the left panel can check listingLoadErrorspecifically to decide showing the error box, and the right panel can showoptimizeError` if one occurs. Ensure that a failure in optimization does not blank out the loaded listings list.
Clear the optimization error state when the user selects a new listing or retries, so old errors don‚Äôt persist incorrectly.
Similarly, check other pages for error handling consistency. The pattern of one global error per page might be present elsewhere (though SEO page is the most complex). Adjust as needed.
Test these flows: simulate Etsy API failure (e.g., return 500) and AI failure to ensure the UI messages are correct and the user can recover (by retrying or continuing to use other parts).
Dependency: None (isolated frontend changes).
Impact: Major UX improvement ‚Äì users won‚Äôt be confused by erroneous error messages.
üî• Isolate and Disable Unready Features: (Effort: 0.5 day)
In the navigation menu (AppLayout or wherever links are listed), comment out or remove links to AI Studio, Mockups, Publishing/Printify, Trends, Analytics if these modules are not functional. Alternatively, if marketing wants them visible, mark them as ‚ÄúComing Soon‚Äù with a tooltip. However, the safer approach is to hide them to focus user attention on what works.
In pages that are partially functional but still valuable (e.g., maybe Trends if it at least shows static data), include a disclaimer at the top like ‚Äú(Demo data shown)‚Äù to set expectations. For AI Studio, since it does nothing real, it should likely be behind a feature flag or accessible only to admin/test accounts.
Remove any dead code that might be exposed by these features. For instance, if there are API endpoints for Printify publishing not fully tested, restrict access to them or remove them for now. This reduces surface area for bugs.
Dependency: Team decision on which features to include at launch.
Impact: Improves overall quality perception; users won‚Äôt stumble into broken parts of the app.
‚ö° Implement Etsy Listing Update (Publishing) or Adjust Expectations: (Effort: 2‚Äì3 days)
The SEO module‚Äôs biggest missing piece is the ability to apply changes. Decide on a near-term strategy:
Easiest: allow users to copy/download the suggestions manually (maybe provide a ‚ÄúCopy optimized title‚Äù button for convenience) and note ‚ÄúUse Etsy‚Äôs shop manager to update your listing.‚Äù This isn‚Äôt ideal but sets expectation that our app currently assists but doesn‚Äôt push changes.
Better: use Etsy API to update the listing‚Äôs title, tags, description. Etsy‚Äôs API has endpoints for updating a listing (PUT to /listings/{listing_id} with relevant fields). We‚Äôd need to implement a new endpoint (e.g., POST /etsy/listings/{id}/update) that takes the optimized content and sends it to Etsy. This requires the user‚Äôs Etsy OAuth token to have write scope. Our EtsyAPI class likely has a method to update listings (to confirm, check Etsy V3 API docs). Implement this method in pod_automation.api.etsy_api and call it in the new endpoint. Use the get_etsy_client(user_id) to get a client with credentials and call update. Handle errors (e.g., Etsy might reject if listing is in draft, etc.).
If implementing, also wire the frontend: change the SEO Optimizer ‚ÄúPublish‚Äù button to call this new endpoint. Provide feedback on success (e.g., show a toast ‚ÄúListing updated on Etsy!‚Äù). On failure, show an error in the UI (distinct from the suggestions error state).
If not implementing immediately, at minimum change the button text or tooltip to ‚ÄúNot yet available‚Äù or hide the button to avoid user frustration.
Dependency: Requires that the Etsy OAuth token stored has write permissions (when connecting Etsy, ensure scopes included listings_write). Also depends on the Etsy API not being in exam mode or requiring payment (should be fine if using v3).
Impact: High user value if done ‚Äì it completes the SEO optimization loop, making the feature truly useful. This is a key differentiator and showcase capability (AI suggestions automatically applied). Even if estimated 2-3 days, it‚Äôs likely worth it before a real launch, provided other critical fixes are done.
‚ö° Finalize OAuth and Account Flows: (Effort: 1 day)
Test the entire sign-up/login and Etsy connect flow end-to-end as if a new user. Ensure that:
The /auth/register and /auth/login endpoints work (password hashing, JWT generation working). Fix any issues in auth_service.py (e.g., make sure passwords are hashed with a strong algorithm, and maybe email verification if needed).
The Etsy OAuth handshake (if implemented) works on a deployed domain (Etsy redirect URI must match exactly). Adjust ETSY_REDIRECT_URI env if needed for production domain
github.com
.
After connecting Etsy, the credentials are saved in Supabase (check the table). Then a call to /etsy/listings returns data for that user. We need this core flow rock-solid, as everything else (SEO, possibly analytics) depends on it.
Implement any missing pieces: e.g., if there‚Äôs no UI prompt to connect Etsy, create one (maybe on Dashboard or Listings page, show ‚ÄúConnect your Etsy shop‚Äù if no token). Leverage the EtsyConnectionStatus schema
github.com
 to show connection state.
Also ensure token refresh is handled (the EtsyAPI class _refresh_token_if_needed logic will refresh if expired
github.com
). Possibly implement a background job or at least ensure that a long-lived user session can refresh the Etsy token.
Dependency: This depends on the correctness of the Supabase setup for storing tokens, and the Etsy API keys being set.
Impact: Essential for real users to onboard and use the app without errors.
‚ö° Infrastructure & Deployment Setup: (Effort: 1 day)
Set up the production environment variables and deployment config. Create a .env.prod with all needed secrets (Supabase, Etsy, JWT, Stripe, etc.) filled in. Use strong values and store them in your deployment system (AWS Secrets Manager, Docker secrets, etc.).
Configure Docker for production: likely build the frontend (producing static files) and serve them. If not already, consider using Nginx or serve via the Node app. The simplest route if time-constrained: use Vite‚Äôs npm run build to generate static assets and then use a tool like serve to serve the dist directory, behind a reverse proxy that also routes API calls to the FastAPI container. Ensure that VITE_API_URL in the production build is correct (it could be /api/v1 if same domain).
Establish a basic CI pipeline: e.g., GitHub Actions or similar to build the Docker images for frontend and backend. Even if deployment is manual initially, having reproducible builds is important.
Set up a staging environment if possible to test everything in an environment close to prod (with real Etsy credentials but maybe a test Etsy account). This will catch any config omissions.
Add health checks and monitoring: The compose file has a healthcheck for the API
github.com
 and for Ollama
github.com
, which is good. In production, monitor these. Optionally set up a simple uptime monitoring for the key endpoints.
Dependency: None specific, just using existing config and docker files.
Impact: Smooth deployment and operation of the system, reducing surprises on launch day.
üîß Quality and Testing Improvements: (Effort: 2 days, can be parallel to above)
Write basic tests: Implement at least the test cases marked TODO for EtsyAPI (test connection, get_listings)
github.com
 using mocked HTTP responses, and for the SEO service (mock the AI response and ensure optimize_listing returns expected structure). If time permits, also test one full API call using FastAPI‚Äôs TestClient with dependency overrides for the adapter (to avoid calling actual Ollama or Etsy). This will prevent regressions in critical logic as you refactor or extend it.
Performance check: Do a quick load test of the SEO optimize endpoint (e.g., 10 concurrent requests) to ensure the async handling is correct and there are no race conditions (especially when multiple calls initialize the adapter or hit Supabase simultaneously). Use FastAPI‚Äôs ability to run async tasks ‚Äì verify that the SEOServiceAdapter being a singleton is thread-safe (it likely is, but e.g., self.optimizer might not be built for concurrency if it uses global state or GPU). If any issues, consider adding locks or queuing for model access.
Optimize logging: Turn down overly verbose logs or wrap them such that debug logs can be enabled via an env flag. For production, you might want to reduce console output noise but still log warnings and errors.
Front-end polishing: Go through each page in a browser and fix minor issues: broken links, missing 404 handling (implement the TODO to show a NotFound page if route is wrong), ensure the dark/light theme toggles if intended (maybe add a toggle switch in settings). These are low-effort but add shine.
Dependency: After main bug fixes are done, these are continuous improvement tasks.
Impact: Better reliability and user experience, easier future development.
By tackling the above in order, the project will rapidly harden its security and stability. Priority is given to anything that can compromise data or severely impact user experience, followed by enabling the key selling point (the AI SEO optimization) to be fully usable. The plan also deliberately cordons off features that are not production-ready so that they do not become sources of bugs or negative impressions. Finally, once these changes are implemented, perform a complete end-to-end test as a user: create account, connect Etsy, fetch listings, run SEO suggestions, apply changes (if implemented), log out/in, etc. Also test edge cases (no listings found, expired token refresh, etc.). This holistic testing will validate that the application is ready for real users and that the SEO module can be showcased confidently as the centerpiece of the AI Pod Automation platform.
